//
//  Group.m
//  FrankApp
//
//  Generated by Ian Terrell on 04/16/2009.
//  Copyright 2009 Ian Terrell. All rights reserved.
//

#import "Group.h"
#import "Frank.h"
#import "User.h"


@implementation Group

@synthesize name;
@synthesize _users;


#pragma mark Create and Update

+(NSString *)tableName {
  return @"groups";
}

-(BOOL)save {
  NSString *sql = nil;
  if ([self isNewRecord])
    sql = @"INSERT INTO groups (name) VALUES (?);";
  else
    sql = [NSString stringWithFormat:@"UPDATE groups SET name = ? WHERE pk = %d;", [pk intValue]];

  FMDatabase *db = [Frank sharedDatabase];
  BOOL success = [db executeUpdate:sql, name];
  if (success)
    self.pk = [FrankObject lastInsertRowId];
  return success;
}

#pragma mark Relationships

-(NSArray *)users {
  if (_users == nil)
    _users = [User findWhere:@"group_pk = ?", pk];
  return _users;
}

-(NSArray *)usersWithReload {
  _users = [User findWhere:@"group_pk = ?", pk];
  return _users;
}

-(int)usersCount {
  if (_users == nil)
    return [User countWhere:@"group_pk = ?", pk];
  return [_users count];
}

#pragma mark Helper Methods


+(id)buildFromResultSetRow:(FMResultSet *)rs {
  Group *group = [Group alloc];
  group.pk = [NSNumber numberWithInt:[rs intForColumn:@"pk"]];
  group.name = [rs stringForColumn:@"name"];
  return [group autorelease];
}

#pragma mark Boilerplate

- (void)dealloc {
  [name release];
  [_users release];
	[super dealloc];
}

@end